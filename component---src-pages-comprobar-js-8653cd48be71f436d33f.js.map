{"version":3,"file":"component---src-pages-comprobar-js-8653cd48be71f436d33f.js","mappings":"4KAAO,MAAMA,EAAQ,CACjBC,QAAS,2BCDAC,EAAiB,CAACC,EAAWC,EAAWC,KACjD,IAAKF,EACD,KAAM,gFAEV,IAAKC,EACD,KAAM,wEAEV,IAAKC,EACD,KAAM,mFAEV,OAAO,CAAI,ECVR,MAAMC,EACT,WAAAC,CAAYC,GACRC,KAAKC,OAASF,EAAeA,EAAaE,OAAS,EACnDD,KAAKE,KAAOH,EAAeA,EAAaI,aAAe,eAC3D,ECFG,MAAMC,EAAW,CAACC,EAAKC,EAAMC,EAAU,CAAC,IACpC,IAAIC,SAAQ,CAACC,EAASC,KACzB,MAAMC,EAAM,IAAIC,eAChBD,EAAIE,iBAAiB,QAAQ,EAAGC,aAC5B,MAAMC,EAAiB,IAAIlB,EAAsBiB,GACnB,MAA1BC,EAAed,QAA0C,OAAxBc,EAAeb,KAChDO,EAAQM,GAGRL,EAAOK,EACX,IAEJJ,EAAIE,iBAAiB,SAAS,EAAGC,aAC7BJ,EAAO,IAAIb,EAAsBiB,GAAQ,IAE7CH,EAAIK,KAAK,OAAQzB,EAAMC,QAAUa,GAAK,GACtCY,OAAOC,KAAKX,GAASY,SAASC,IAC1BT,EAAIU,iBAAiBD,EAAKb,EAAQa,GAAK,IAE3CT,EAAIW,KAAKhB,EAAK,ICjBtB,OACIiB,KCCgB,CAAC7B,EAAW8B,EAAS,6BACrCjC,EAAMkC,QAAU/B,EAChBH,EAAMC,QAAUgC,CAAM,EDFtBF,KEKgB,CAAC3B,EAAWC,EAAY8B,EAAehC,KACvD,MAAMiC,EAAMjC,GAAaH,EAAMkC,QAC/BhC,EAAekC,EAAKhC,EAAWC,GAC/B,MAAMgC,EAAS,CACXC,YAAa,SACbC,QAASH,EACTI,WAAYpC,EACZqC,YAAapC,EACbqC,gBAAiBP,GAErB,OAAOtB,EAAS,uBAAwB8B,KAAKC,UAAUP,GAAS,CAC5D,eAAgB,oBAClB,EFhBFQ,SGiBoB,CAACzC,EAAWC,EAAYyC,EAAM3C,KAClD,MAAMiC,EAAMjC,GAAaH,EAAMkC,QACzBa,EAvBW,CAACD,IAClB,IAAIC,EAOJ,GALIA,EADgB,iBAATD,EACOE,SAASC,cAAcH,GAGvBA,GAEbC,GAAwC,SAAzBA,EAAYG,SAC5B,KAAM,0FAEV,OAAOH,CAAW,EAYEI,CAAaL,GACjC5C,EAAekC,EAAKhC,EAAWC,GAC/B,MAAM+C,EAAW,IAAIC,SAASN,GAK9B,OAJAK,EAASE,OAAO,cAAe,UAC/BF,EAASE,OAAO,aAAclD,GAC9BgD,EAASE,OAAO,cAAejD,GAC/B+C,EAASE,OAAO,UAAWlB,GACpBvB,EAAS,4BAA6BuC,EAAS,E,qGC5B3C,SAASG,IACtB,MAAMT,GAAOU,EAAAA,EAAAA,UAsBb,OACEC,EAAAA,cAACC,EAAAA,EAAM,CAACC,UAAQ,GACdF,EAAAA,cAAA,WAASG,GAAG,WACVH,EAAAA,cAAA,cACEA,EAAAA,cAAA,OAAKI,UAAU,SACbJ,EAAAA,cAAA,MAAII,UAAU,SAAQ,gBACtBJ,EAAAA,cAAA,SAAG,kGAE6B,KAGhCA,EAAAA,cAAA,QAAMK,OAAO,OAAOC,OAAO,KAAKC,IAAKlB,EAAMmB,SA/BlCC,IACjBA,EAAEC,iBAEFC,EAAAA,GAAAA,SAEI,kBACA,mBACAtB,EAAKuB,QACL,qBAEDC,MACEC,IACCC,QAAQC,IAAIF,EAAO5D,KAAK,IAEzB+D,IACCF,QAAQC,IAAIC,EAAM/D,KAAK,GAE1B,GAeO8C,EAAAA,cAAA,OAAKI,UAAU,UACbJ,EAAAA,cAAA,OAAKI,UAAU,SACbJ,EAAAA,cAAA,SAAOkB,QAAQ,SAAQ,eACvBlB,EAAAA,cAAA,SAAOmB,KAAK,OAAOC,KAAK,SAASjB,GAAG,WAEtCH,EAAAA,cAAA,OAAKI,UAAU,SACbJ,EAAAA,cAAA,SAAOkB,QAAQ,SAAQ,SACvBlB,EAAAA,cAAA,SAAOmB,KAAK,QAAQC,KAAK,QAAQjB,GAAG,WAEtCH,EAAAA,cAAA,OAAKI,UAAU,SACbJ,EAAAA,cAAA,SAAOkB,QAAQ,UAAS,UACxBlB,EAAAA,cAAA,SAAOmB,KAAK,OAAOC,KAAK,QAAQjB,GAAG,aAGvCH,EAAAA,cAAA,MAAII,UAAU,WACZJ,EAAAA,cAAA,UACEA,EAAAA,cAAA,SAAOmB,KAAK,SAASE,MAAM,yBAS7C,C","sources":["webpack://gatsby-starter-solidstate/./node_modules/@emailjs/browser/es/store/store.js","webpack://gatsby-starter-solidstate/./node_modules/@emailjs/browser/es/utils/validateParams.js","webpack://gatsby-starter-solidstate/./node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","webpack://gatsby-starter-solidstate/./node_modules/@emailjs/browser/es/api/sendPost.js","webpack://gatsby-starter-solidstate/./node_modules/@emailjs/browser/es/index.js","webpack://gatsby-starter-solidstate/./node_modules/@emailjs/browser/es/methods/init/init.js","webpack://gatsby-starter-solidstate/./node_modules/@emailjs/browser/es/methods/send/send.js","webpack://gatsby-starter-solidstate/./node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","webpack://gatsby-starter-solidstate/./src/pages/Comprobar.js"],"sourcesContent":["export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey) {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse ? httpResponse.status : 0;\n        this.text = httpResponse ? httpResponse.responseText : 'Network Error';\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\n/**\n * Initiation\n * @param {string} publicKey - set the EmailJS public key\n * @param {string} origin - set the EmailJS origin\n */\nexport const init = (publicKey, origin = 'https://api.emailjs.com') => {\n    store._userID = publicKey;\n    store._origin = origin;\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templatePrams - the template params, what will be set to the EmailJS template\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = (serviceID, templateID, templatePrams, publicKey) => {\n    const uID = publicKey || store._userID;\n    validateParams(uID, serviceID, templateID);\n    const params = {\n        lib_version: '3.12.1',\n        user_id: uID,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templatePrams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, publicKey) => {\n    const uID = publicKey || store._userID;\n    const currentForm = findHTMLForm(form);\n    validateParams(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.12.1');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","import React, { useRef } from 'react';\nimport emailjs from '@emailjs/browser';\n\nimport Layout from '../components/Layout';\n\nexport default function IndexPage() {\n  const form = useRef();\n\n  const sendEmail = (e) => {\n    e.preventDefault();\n\n    emailjs\n      .sendForm(\n        'service_smhaj7f', //'YOUR_SERVICE_ID',\n        'template_alsfqvn', //'YOUR_TEMPLATE_ID',\n        form.current,\n        'phP3Y2bB2iA7YN1Gc' //'YOUR_PUBLIC_KEY'\n      )\n      .then(\n        (result) => {\n          console.log(result.text);\n        },\n        (error) => {\n          console.log(error.text);\n        }\n      );\n  };\n\n  return (\n    <Layout fullMenu>\n      <section id=\"wrapper\">\n        <header>\n          <div className=\"inner\">\n            <h2 className=\"major\">Verificación</h2>\n            <p>\n              Para verificar trámite, ingresar Número UBRO y correo electrónico\n              con el cual inicio su trámite{' '}\n            </p>\n\n            <form method=\"post\" action=\"/#\" ref={form} onSubmit={sendEmail}>\n              <div className=\"fields\">\n                <div className=\"field\">\n                  <label htmlFor=\"email\">Numero UBRO</label>\n                  <input type=\"text\" name=\"n_ubro\" id=\"email\" />\n                </div>\n                <div className=\"field\">\n                  <label htmlFor=\"email\">Email</label>\n                  <input type=\"email\" name=\"email\" id=\"email\" />\n                </div>\n                <div className=\"field\">\n                  <label htmlFor=\"numero\">Numero</label>\n                  <input type=\"text\" name=\"n_cel\" id=\"numero\" />\n                </div>\n              </div>\n              <ul className=\"actions\">\n                <li>\n                  <input type=\"submit\" value=\"Enviar Mensaje\" />\n                </li>\n              </ul>\n            </form>\n          </div>\n        </header>\n      </section>\n    </Layout>\n  );\n}\n"],"names":["store","_origin","validateParams","publicKey","serviceID","templateID","EmailJSResponseStatus","constructor","httpResponse","this","status","text","responseText","sendPost","url","data","headers","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","target","responseStatus","open","Object","keys","forEach","key","setRequestHeader","send","init","origin","_userID","templatePrams","uID","params","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","sendForm","form","currentForm","document","querySelector","nodeName","findHTMLForm","formData","FormData","append","IndexPage","useRef","React","Layout","fullMenu","id","className","method","action","ref","onSubmit","e","preventDefault","emailjs","current","then","result","console","log","error","htmlFor","type","name","value"],"sourceRoot":""}